/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bankaccount.view;

import bankaccount.common.Utils;
import bankaccount.controller.AccountController;
import bankaccount.controller.CustomerController;
import bankaccount.model.Account;
import bankaccount.model.CreditAccount;
import bankaccount.model.Customer;
import bankaccount.model.NormalSpendAccount;
import bankaccount.model.VipSpendAccount;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.Optional;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

public class AccountForm extends javax.swing.JFrame {
    private AccountController accountController;
    
    /**
     * Creates new form AccountForm
     */
    public AccountForm() {
        initComponents();
        accountController = new AccountController();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtSoTK = new javax.swing.JTextField();
        txtTenKH = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAccount = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Danh sách tài khoản");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));

        jLabel2.setText("Số tài khoản");

        jLabel3.setText("Tên khách hàng");

        jButton1.setText("Tìm kiếm");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSoTK)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtTenKH)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 76, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSoTK, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTenKH, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jTableAccount.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Số TK", "Loại TK", "Tên KH", "Ngày Mở", "Số dư", "Hạn mức chi", "Hạn mức TD", " ", "  ", "   ", "    ", "     ", "      "
            }
        ));
        jTableAccount.setRowHeight(22);
        jScrollPane2.setViewportView(jTableAccount);
        if (jTableAccount.getColumnModel().getColumnCount() > 0) {
            jTableAccount.getColumnModel().getColumn(1).setPreferredWidth(50);
            jTableAccount.getColumnModel().getColumn(3).setPreferredWidth(70);
            jTableAccount.getColumnModel().getColumn(5).setPreferredWidth(100);
            jTableAccount.getColumnModel().getColumn(6).setPreferredWidth(70);
            jTableAccount.getColumnModel().getColumn(11).setPreferredWidth(100);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(404, 404, 404)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 511, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 422, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        List<Account> accountList = accountController.getAllAccounts();
        setAccountList(accountList);
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String accountNo = txtSoTK.getText();
        String accountName = txtTenKH.getText();
        List<Account> accountList = accountController.search(accountNo, accountName);
        setAccountList(accountList);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableAccount;
    private javax.swing.JTextField txtSoTK;
    private javax.swing.JTextField txtTenKH;
    // End of variables declaration//GEN-END:variables

    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer(String title) {
                setText(title);
                setSize(24, 24);
                setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            if (isSelected) {
                setForeground(table.getSelectionForeground());
                setBackground(table.getSelectionBackground());
            } else {
                setForeground(table.getForeground());
                setBackground(UIManager.getColor("Button.background"));
            }
            return this;
        }
    }  
    
    public void setAccountList(List<Account> accountList) {
        if (accountList == null || accountList.isEmpty()) {
            return;
        }
        jTableAccount.getColumn(" ").setCellRenderer(new AccountForm.ButtonRenderer("Sửa"));
        ButtonEditor btnEdit = new ButtonEditor(new JCheckBox(), 0, this);
        btnEdit.setData(accountList, jTableAccount);
        jTableAccount.getColumn(" ").setCellEditor(btnEdit);

        jTableAccount.getColumn("  ").setCellRenderer(new AccountForm.ButtonRenderer("Xóa"));
        ButtonEditor btnRemove = new ButtonEditor(new JCheckBox(), 1, this);
        btnRemove.setData(accountList, jTableAccount);
        jTableAccount.getColumn("  ").setCellEditor(btnRemove);
        
        jTableAccount.getColumn("   ").setCellRenderer(new AccountForm.ButtonRenderer("Nạp tiền"));
        ButtonEditor btnDeposit = new ButtonEditor(new JCheckBox(), 2, this);
        btnDeposit.setData(accountList, jTableAccount);
        jTableAccount.getColumn("   ").setCellEditor(btnDeposit);
        
        jTableAccount.getColumn("    ").setCellRenderer(new AccountForm.ButtonRenderer("Rút tiền"));
        ButtonEditor btnWithdraw = new ButtonEditor(new JCheckBox(), 3, this);
        btnWithdraw.setData(accountList, jTableAccount);
        jTableAccount.getColumn("    ").setCellEditor(btnWithdraw);
        
        jTableAccount.getColumn("     ").setCellRenderer(new AccountForm.ButtonRenderer("Chuyển tiền"));
        ButtonEditor btnTransfer = new ButtonEditor(new JCheckBox(), 4, this);
        btnTransfer.setData(accountList, jTableAccount);
        jTableAccount.getColumn("     ").setCellEditor(btnTransfer);
        
        jTableAccount.getColumn("      ").setCellRenderer(new AccountForm.ButtonRenderer("Lịch sử"));
        ButtonEditor btnHis = new ButtonEditor(new JCheckBox(), 5, this);
        btnHis.setData(accountList, jTableAccount);
        jTableAccount.getColumn("      ").setCellEditor(btnHis);
        
        DefaultTableModel modelTable = (DefaultTableModel) jTableAccount.getModel();
        modelTable.setRowCount(0);

        for (Account acc : accountList) {
            String accountType = "";
            String balance = "";
            String cashLimit = "";
            String creditLimit = "";
            if (acc instanceof NormalSpendAccount) {
                NormalSpendAccount normalSpendAccount = (NormalSpendAccount) acc;
                accountType = "NORMAL";
                balance = Utils.customCurrency("###,###.##", String.valueOf(normalSpendAccount.getBalance()));
                cashLimit = Utils.customCurrency("###,###.##", String.valueOf(normalSpendAccount.getCashLimit()));
            } else if (acc instanceof VipSpendAccount) {
                VipSpendAccount vipSpendAccount = (VipSpendAccount) acc;
                accountType = "VIP";
                balance = Utils.customCurrency("###,###.##", String.valueOf(vipSpendAccount.getBalance()));
                cashLimit = Utils.customCurrency("###,###.##", String.valueOf(vipSpendAccount.getCashLimit()));
            } else {
                CreditAccount creditAccount = (CreditAccount) acc;
                creditLimit = Utils.customCurrency("###,###.##", String.valueOf(creditAccount.getCreditLimit()));
            }
            Object[] row = new Object[] {
                acc.getAccountNo(), 
                accountType, 
                acc.getAccountName(), 
                Utils.formatDate(acc.getOpenDate(), "dd-MM-yyyy"), 
                balance,
                cashLimit,
                creditLimit
            };
            modelTable.addRow(row);
        }
    }
}

class ButtonEditor extends DefaultCellEditor {
    protected JButton button;

    private String label;

    private List<Account> accountList;
    private JTable jTable;

    public ButtonEditor(JCheckBox checkBox, int type, AccountForm accountForm) {
        super(checkBox);
        button = new JButton();
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fireEditingStopped();
                int row = Integer.parseInt(e.getActionCommand());
                if (row >= 0) {
                    String selectedAccountNo = (String) jTable.getValueAt(row, 0);
                    Optional<Account> opt = accountList.stream()
                            .filter(acc -> selectedAccountNo.equals(acc.getAccountNo()))
                            .findFirst();
                    if (!opt.isPresent()) {
                        JOptionPane.showMessageDialog(null, "Có lỗi xảy ra...");
                        return;
                    }
                    Account account = opt.get();
                    if (type == 0) { // Update
                        EditAccountForm editAccountForm = new EditAccountForm();
                        editAccountForm.setData(account);
                        editAccountForm.setForm(accountForm);
                        editAccountForm.setVisible(true);
                    } else if (type == 1) { // Remove
                        int input = JOptionPane.showConfirmDialog(accountForm, "Bạn có muốn xóa tài khoản này không?");
                        if (input == 0) {
                            AccountController accountController = new AccountController();
                            boolean result = accountController.remove(account);
                            if (!result) {
                                JOptionPane.showMessageDialog(null, "Xóa tài khoản thất bại...");
                                return;
                            }
                            List<Account> accountList = accountController.getAllAccounts();
                            accountForm.setAccountList(accountList);
                        }
                    } else if (type == 2) { // Nạp tiền
                        
                    } else if (type == 3) { // Rút tiền
                        
                    } else if (type == 4) { // Chuyển tiền
                        
                    } else if (type == 5) { // Lịch sử
                        
                    }
                }
            }
        });
    }

    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        if (isSelected) {
            button.setForeground(table.getSelectionForeground());
            button.setBackground(table.getSelectionBackground());
       } else {
            button.setForeground(table.getForeground());
            button.setBackground(table.getBackground());
        }
        button.setActionCommand(String.valueOf(row));
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        return button;
    }

    @Override
    public Object getCellEditorValue() {
        return label;
    }

    @Override
    public boolean stopCellEditing() {
        return super.stopCellEditing();
    }

    @Override
    protected void fireEditingStopped() {
       super.fireEditingStopped();
    }

    void setData(List<Account> accountList, JTable jTable) {
        this.accountList = accountList;
        this.jTable = jTable;
    }
}
